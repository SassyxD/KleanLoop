// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int            @id @default(autoincrement())
  email            String         @unique
  password         String
  name             String
  type             String // 'personal' | 'corporate'
  reputationPoints Int            @default(100) @map("reputation_points")
  tier             String         @default("bronze")
  avatar           String?
  companyName      String?        @map("company_name")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  
  transactions     Transaction[]
  notifications    Notification[]
  credits          Credit[]

  @@map("users")
}

model Transaction {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  type        String   // 'sell' | 'buy'
  plasticType String?  @map("plastic_type") // 'PET' | 'HDPE' | 'LDPE' | 'PP' | 'mixed'
  weight      Float
  pricePerKg  Float    @map("price_per_kg")
  tierBonus   Float    @default(0) @map("tier_bonus")
  serviceFee  Float    @default(0) @map("service_fee")
  totalAmount Float    @map("total_amount")
  status      String   @default("pending") // 'pending' | 'completed' | 'cancelled'
  photoUrl    String?  @map("photo_url")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  user        User     @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model Notification {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  title       String
  description String
  type        String   // 'pickup' | 'reward' | 'system'
  isRead      Boolean  @default(false) @map("is_read")
  actionUrl   String?  @map("action_url")
  createdAt   DateTime @default(now()) @map("created_at")
  
  user        User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Credit {
  id              Int      @id @default(autoincrement())
  userId          Int      @map("user_id")
  amount          Int      // in kg
  pricePerCredit  Float    @map("price_per_credit")
  totalPrice      Float    @map("total_price")
  certificateUrl  String?  @map("certificate_url")
  packageType     String   @map("package_type") // '100kg' | '500kg' | '1000kg' | 'custom'
  createdAt       DateTime @default(now()) @map("created_at")
  
  user            User     @relation(fields: [userId], references: [id])

  @@map("credits")
}
